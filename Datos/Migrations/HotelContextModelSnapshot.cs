// <auto-generated />
using System;
using Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datos.Migrations
{
    [DbContext(typeof(HotelContext))]
    partial class HotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.Habitacion", b =>
                {
                    b.Property<string>("IdHabitacion")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Estado")
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime>("FechaDisponible")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(8)");

                    b.Property<int>("nPersonas")
                        .HasColumnType("int");

                    b.HasKey("IdHabitacion");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("Entity.Persona", b =>
                {
                    b.Property<string>("Cedula")
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Sexo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(13)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Cedula");

                    b.HasIndex("UserName");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("Entity.Reserva", b =>
                {
                    b.Property<string>("IdReserva")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Cedula")
                        .HasColumnType("varchar(13)");

                    b.Property<int>("Dias")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime");

                    b.Property<string>("IdHabitacion")
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("Iva")
                        .HasColumnType("decimal");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal");

                    b.HasKey("IdReserva");

                    b.HasIndex("Cedula");

                    b.HasIndex("IdHabitacion");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity.Cliente", b =>
                {
                    b.HasBaseType("Entity.Persona");

                    b.Property<string>("IdCliente")
                        .HasColumnType("varchar(13)");

                    b.Property<string>("IdHabitacion")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Ppal")
                        .HasColumnType("varchar(13)");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("Ppal");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("Entity.Empleado", b =>
                {
                    b.HasBaseType("Entity.Persona");

                    b.Property<string>("Cargo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("IdEmpleado")
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Jefe")
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Jornada")
                        .HasColumnType("varchar(8)");

                    b.HasIndex("Jefe");

                    b.HasDiscriminator().HasValue("Empleado");
                });

            modelBuilder.Entity("Entity.Persona", b =>
                {
                    b.HasOne("Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName");
                });

            modelBuilder.Entity("Entity.Reserva", b =>
                {
                    b.HasOne("Entity.Cliente", null)
                        .WithMany()
                        .HasForeignKey("Cedula");

                    b.HasOne("Entity.Habitacion", null)
                        .WithMany()
                        .HasForeignKey("IdHabitacion");
                });

            modelBuilder.Entity("Entity.Cliente", b =>
                {
                    b.HasOne("Entity.Persona", null)
                        .WithMany()
                        .HasForeignKey("Cedula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Habitacion", null)
                        .WithMany()
                        .HasForeignKey("IdHabitacion");

                    b.HasOne("Entity.Cliente", null)
                        .WithMany()
                        .HasForeignKey("Ppal");
                });

            modelBuilder.Entity("Entity.Empleado", b =>
                {
                    b.HasOne("Entity.Persona", null)
                        .WithMany()
                        .HasForeignKey("Cedula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Empleado", null)
                        .WithMany()
                        .HasForeignKey("Jefe");
                });
#pragma warning restore 612, 618
        }
    }
}
